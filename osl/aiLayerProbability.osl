//-----------Function for ramp------------------------------------------------------------
float pointShading(float coordU, float coordV, int BarycentricCheck)
{
	point uv = point(coordU, coordV, 0);
	uv = transform("object", uv);
	if (BarycentricCheck)
		uv += 0.0;
	else 
		uv += 0.5;
	float d = uv[1];
	return d;
}

//-----------Function for position--------------------------------------------------------
float positionFunc(float pos, float soft, float posDir, float bu, float bv, int BarycentricCheck)
{
	float rampD = pointShading(bu, bv, BarycentricCheck);
	float posOut = 0.0;
	float posC = pos;
	//if (BarycentricCheck)
	//	posC = pos;
	//else
	//	posC = pos/4.0;
	
	if (posDir == 1) 
	{	
		//posC = 1.0-posC;
		posOut = smoothstep(posC, posC+soft, rampD);
	}
	else
	{
		posC = 1.0-posC;
		posOut = smoothstep(posC, soft+posC, 1.0-rampD);
	}

	
	return posOut;
}

//-----------Function to output probability and position together--------------------------
float probabilityFunc(float prob,float randInput)
{

	float probOut = 0.0;
	
	if (randInput<=prob)
		probOut = 1.0;
	else
		probOut = 0.0;
	
	return probOut;
}

//----------Function for melanin calculation---------------------------------------------
color melaninFunc(float melaninIn)
{
	color melaninOut = exp(max(pow(melaninIn, 2.0)*33.0, 1.0e-2) * -color(0.187, 0.4, 1.05));
	return melaninOut;
}


//-----SHADER PARAMETER BEGIN---------------------------------------------
shader aiLayerProbability
(	
	float randInput = 0.0,
	int Barycentric = 0 [[string widget = "boolean" ]],
	float BarycentricU = 0.0,
	float BarycentricV = 0.0,


//----------------------BaseColor----------------------------------------
	//float randInput_L1 = 0,
	int outputMelanin_BC = 0 [[string widget = "boolean"]],
	float melaninRoot_BC = 0.25,
	float melaninTip_BC = 0.75,
	
	color rootColor_BC = color(1.0, 1.0, 1.0),
	color tipColor_BC = color(0.0, 0.0, 0.0),
	float pos_BC = 0.5,
	float soft_BC = 0.01,
	int posDir_BC = 0 [[ string widget = "popup", string options = "rootToTip|tipToRoot" ]],
	
//----------------------Layer1-------------------------------------------
	int Layer1 = 1 [[string widget = "boolean"]],
	//float randInput_L1 = 0,
	int outputMelanin_L1 = 0 [[string widget = "boolean"]],
	float melaninRoot_L1 = 0.25,
	float melaninTip_L1 = 0.75,
	
	color rootColor_L1 = color(1.0, 1.0, 1.0),
	color tipColor_L1 = color(0.0, 0.0, 0.0),
	float probability_L1 = 0.5,
	float pos_L1 = 0.5,
	float soft_L1 = 0.01,
	int posDir_L1 = 0 [[ string widget = "popup", string options = "rootToTip|tipToRoot" ]],
	
//----------------------Layer2-------------------------------------------
	int Layer2 = 0 [[string widget = "boolean"]],
	//float randInput_L2 = 0,
	int outputMelanin_L2 = 0 [[string widget = "boolean"]],
	float melaninRoot_L2 = 0.25,
	float melaninTip_L2 = 0.75,
	
	color rootColor_L2 = color(1.0, 1.0, 1.0),
	color tipColor_L2 = color(0.0, 0.0, 0.0),
	float probability_L2 = 0.5,
	float pos_L2 = 0.5,
	float soft_L2 = 0.01,
	int posDir_L2 = 0 [[ string widget = "popup", string options = "rootToTip|tipToRoot" ]],

//----------------------Layer3-------------------------------------------
	int Layer3 = 0 [[string widget = "boolean"]],
	//float randInput_L3 = 0,
	int outputMelanin_L3 = 0 [[string widget = "boolean"]],
	float melaninRoot_L3 = 0.25,
	float melaninTip_L3 = 0.75,
	
	color rootColor_L3 = color(1.0, 1.0, 1.0),
	color tipColor_L3 = color(0.0, 0.0, 0.0),
	float probability_L3 = 0.5,
	float pos_L3 = 0.5,
	float soft_L3 = 0.01,
	int posDir_L3 = 0 [[ string widget = "popup", string options = "rootToTip|tipToRoot" ]],

//----------------------Layer4-------------------------------------------
	int Layer4 = 0 [[string widget = "boolean"]],
	//float randInput_L4 = 0,
	int outputMelanin_L4 = 0 [[string widget = "boolean"]],
	float melaninRoot_L4 = 0.25,
	float melaninTip_L4 = 0.75,
	
	color rootColor_L4 = color(1.0, 1.0, 1.0),
	color tipColor_L4 = color(0.0, 0.0, 0.0),
	float probability_L4 = 0.5,
	float pos_L4 = 0.5,
	float soft_L4 = 0.01,
	int posDir_L4 = 0 [[ string widget = "popup", string options = "rootToTip|tipToRoot" ]],

//----------------------Layer5-------------------------------------------
	int Layer5 = 0 [[string widget = "boolean"]],
	//float randInput_L5 = 0,
	int outputMelanin_L5 = 0 [[string widget = "boolean"]],
	float melaninRoot_L5 = 0.25,
	float melaninTip_L5 = 0.75,
	
	color rootColor_L5 = color(1.0, 1.0, 1.0),
	color tipColor_L5 = color(0.0, 0.0, 0.0),
	float probability_L5 = 0.5,
	float pos_L5 = 0.5,
	float soft_L5 = 0.01,
	int posDir_L5 = 0 [[ string widget = "popup", string options = "rootToTip|tipToRoot" ]],

//----------------------Layer6-------------------------------------------
	int Layer6 = 0 [[string widget = "boolean"]],
	//float randInput_L6 = 0,
	int outputMelanin_L6 = 0 [[string widget = "boolean"]],
	float melaninRoot_L6 = 0.25,
	float melaninTip_L6 = 0.75,
	
	color rootColor_L6 = color(1.0, 1.0, 1.0),
	color tipColor_L6 = color(0.0, 0.0, 0.0),
	float probability_L6 = 0.5,
	float pos_L6 = 0.5,
	float soft_L6 = 0.01,
	int posDir_L6 = 0 [[ string widget = "popup", string options = "rootToTip|tipToRoot" ]],

//----------------------Layer7-------------------------------------------
	int Layer7 = 0 [[string widget = "boolean"]],
	//float randInput_L7 = 0,
	int outputMelanin_L7 = 0 [[string widget = "boolean"]],
	float melaninRoot_L7 = 0.25,
	float melaninTip_L7 = 0.75,
	
	color rootColor_L7 = color(1.0, 1.0, 1.0),
	color tipColor_L7 = color(0.0, 0.0, 0.0),
	float probability_L7 = 0.5,
	float pos_L7 = 0.5,
	float soft_L7 = 0.01,
	int posDir_L7 = 0 [[ string widget = "popup", string options = "rootToTip|tipToRoot" ]],

//----------------------Layer8-------------------------------------------
	int Layer8 = 0 [[string widget = "boolean"]],
	//float randInput_L8 = 0,
	int outputMelanin_L8 = 0 [[string widget = "boolean"]],
	float melaninRoot_L8 = 0.25,
	float melaninTip_L8 = 0.75,
	
	color rootColor_L8 = color(1.0, 1.0, 1.0),
	color tipColor_L8 = color(0.0, 0.0, 0.0),
	float probability_L8 = 0.5,
	float pos_L8 = 0.5,
	float soft_L8 = 0.01,
	int posDir_L8 = 0 [[ string widget = "popup", string options = "rootToTip|tipToRoot" ]],
	
//----------------------Layer9-------------------------------------------
	int Layer9 = 0 [[string widget = "boolean"]],
	//float randInput_L9 = 0,
	int outputMelanin_L9 = 0 [[string widget = "boolean"]],
	float melaninRoot_L9 = 0.25,
	float melaninTip_L9 = 0.75,
	
	color rootColor_L9 = color(1.0, 1.0, 1.0),
	color tipColor_L9 = color(0.0, 0.0, 0.0),
	float probability_L9 = 0.5,
	float pos_L9 = 0.5,
	float soft_L9 = 0.01,
	int posDir_L9 = 0 [[ string widget = "popup", string options = "rootToTip|tipToRoot" ]],

//----------------------Layer10------------------------------------------
	int Layer10 = 0 [[string widget = "boolean"]],
	//float randInput_L10 = 0,
	int outputMelanin_L10 = 0 [[string widget = "boolean"]],
	float melaninRoot_L10 = 0.25,
	float melaninTip_L10 = 0.75,
	
	color rootColor_L10 = color(1.0, 1.0, 1.0),
	color tipColor_L10 = color(0.0, 0.0, 0.0),
	float probability_L10 = 0.5,
	float pos_L10 = 0.5,
	float soft_L10 = 0.01,
	int posDir_L10 = 0 [[ string widget = "popup", string options = "rootToTip|tipToRoot" ]],



	output color result = 0
	
)



{
	color baseCol_root_res = melaninFunc(melaninRoot_BC)*positionFunc(pos_BC, soft_BC, posDir_BC, Barycentric==1?BarycentricU:P[0], Barycentric==1?BarycentricV:P[1], Barycentric);
	color baseCol_tip_res = melaninFunc(melaninTip_BC)*(1.0-positionFunc(pos_BC, soft_BC, posDir_BC, Barycentric==1?BarycentricU:P[0], Barycentric==1?BarycentricV:P[1], Barycentric));
	color BC_melanin_res = clamp((baseCol_root_res+baseCol_tip_res), 0.0, 1.0);
	
	color outCol_root_res_BC = rootColor_BC*positionFunc(pos_BC, soft_BC, posDir_BC, Barycentric==1?BarycentricU:P[0], Barycentric==1?BarycentricV:P[1], Barycentric);
	color outCol_tip_res_BC = tipColor_BC*(1.0-positionFunc(pos_BC, soft_BC, posDir_BC, Barycentric==1?BarycentricU:P[0], Barycentric==1?BarycentricV:P[1], Barycentric));
	color BC_col_res = clamp((outCol_root_res_BC+outCol_tip_res_BC), 0.0, 1.0);
	
	if (outputMelanin_BC)
		color baseCol_result = BC_melanin_res;
	else
		baseCol_result = BC_col_res;
	
	result = baseCol_result;
	
//-------------------Globals------------------------
	color Layer1_mix_result = color(0.0);
	color Layer2_mix_result = color(0.0);
	color Layer3_mix_result = color(0.0);
	color Layer4_mix_result = color(0.0);
	color Layer5_mix_result = color(0.0);
	color Layer6_mix_result = color(0.0);
	color Layer7_mix_result = color(0.0);
	color Layer8_mix_result = color(0.0);
	color Layer9_mix_result = color(0.0);
	color Layer10_mix_result = color(0.0);
	
	
//-----------------LAYER1---------------------------------------------------------------------------
	if (Layer1)
	{
		color outMelanin_root_res_L1 = melaninFunc(melaninRoot_L1)*probabilityFunc(probability_L1, randInput)*positionFunc(pos_L1, soft_L1, posDir_L1, Barycentric==1?BarycentricU:P[0], Barycentric==1?BarycentricV:P[1], Barycentric);
		color outMelanin_tip_res_L1 = melaninFunc(melaninTip_L1)*probabilityFunc(probability_L1, randInput)*(1.0-positionFunc(pos_L1, soft_L1, posDir_L1, Barycentric==1?BarycentricU:P[0], Barycentric==1?BarycentricV:P[1], Barycentric));
		color Layer1_melanin_res = clamp((outMelanin_root_res_L1+outMelanin_tip_res_L1), 0.0, 1.0);

		color outCol_root_res_L1 = rootColor_L1*probabilityFunc(probability_L1, randInput)*positionFunc(pos_L1, soft_L1, posDir_L1, Barycentric==1?BarycentricU:P[0], Barycentric==1?BarycentricV:P[1], Barycentric);
		color outCol_tip_res_L1 = tipColor_L1*probabilityFunc(probability_L1, randInput)*(1.0-positionFunc(pos_L1, soft_L1, posDir_L1, Barycentric==1?BarycentricU:P[0], Barycentric==1?BarycentricV:P[1], Barycentric));
		color Layer1_col_res = clamp((outCol_root_res_L1+outCol_tip_res_L1), 0.0, 1.0);
		
		if (outputMelanin_L1)
			color Layer1_result = Layer1_melanin_res;
		else
			Layer1_result = Layer1_col_res;
		
		float alpha_L1 = probabilityFunc(probability_L1, randInput);
		
		Layer1_mix_result = mix(baseCol_result, Layer1_result, alpha_L1);
		
		result = Layer1_mix_result;
	}
	else
		Layer1_mix_result = baseCol_result;
	
	
//-----------------LAYER2---------------------------------------------------------------------------
	if (Layer2)
	{
		color outMelanin_root_res_L2 = melaninFunc(melaninRoot_L2)*probabilityFunc(probability_L2, randInput)*positionFunc(pos_L2, soft_L2, posDir_L2, Barycentric==1?BarycentricU:P[0], Barycentric==1?BarycentricV:P[1], Barycentric);
		color outMelanin_tip_res_L2 = melaninFunc(melaninTip_L2)*probabilityFunc(probability_L2, randInput)*(1.0-positionFunc(pos_L2, soft_L2, posDir_L2, Barycentric==1?BarycentricU:P[0], Barycentric==1?BarycentricV:P[1], Barycentric));
		color Layer2_melanin_res = clamp((outMelanin_root_res_L2+outMelanin_tip_res_L2), 0.0, 1.0);

		color outCol_root_res_L2 = rootColor_L2*probabilityFunc(probability_L2, randInput)*positionFunc(pos_L2, soft_L2, posDir_L2, Barycentric==1?BarycentricU:P[0], Barycentric==1?BarycentricV:P[1], Barycentric);
		color outCol_tip_res_L2 = tipColor_L2*probabilityFunc(probability_L2, randInput)*(1.0-positionFunc(pos_L2, soft_L2, posDir_L2, Barycentric==1?BarycentricU:P[0], Barycentric==1?BarycentricV:P[1], Barycentric));
		color Layer2_col_res = clamp((outCol_root_res_L2+outCol_tip_res_L2), 0.0, 1.0);
		
		if (outputMelanin_L2)
			color Layer2_result = Layer2_melanin_res;
		else
			Layer2_result = Layer2_col_res;
		
		float alpha_L2 = probabilityFunc(probability_L2, randInput);
		
		Layer2_mix_result = mix(Layer1_mix_result, Layer2_result, alpha_L2);
		
		result = Layer2_mix_result;
	}
	else
		Layer2_mix_result = Layer1_mix_result;
	

	
//-----------------LAYER3---------------------------------------------------------------------------
	if (Layer3)
	{
		color outMelanin_root_res_L3 = melaninFunc(melaninRoot_L3)*probabilityFunc(probability_L3, randInput)*positionFunc(pos_L3, soft_L3, posDir_L3, Barycentric==1?BarycentricU:P[0], Barycentric==1?BarycentricV:P[1], Barycentric);
		color outMelanin_tip_res_L3 = melaninFunc(melaninTip_L3)*probabilityFunc(probability_L3, randInput)*(1.0-positionFunc(pos_L3, soft_L3, posDir_L3, Barycentric==1?BarycentricU:P[0], Barycentric==1?BarycentricV:P[1], Barycentric));
		color Layer3_melanin_res = clamp((outMelanin_root_res_L3+outMelanin_tip_res_L3), 0.0, 1.0);

		color outCol_root_res_L3 = rootColor_L3*probabilityFunc(probability_L3, randInput)*positionFunc(pos_L3, soft_L3, posDir_L3, Barycentric==1?BarycentricU:P[0], Barycentric==1?BarycentricV:P[1], Barycentric);
		color outCol_tip_res_L3 = tipColor_L3*probabilityFunc(probability_L3, randInput)*(1.0-positionFunc(pos_L3, soft_L3, posDir_L3, Barycentric==1?BarycentricU:P[0], Barycentric==1?BarycentricV:P[1], Barycentric));
		color Layer3_col_res = clamp((outCol_root_res_L3+outCol_tip_res_L3), 0.0, 1.0);
		
		if (outputMelanin_L3)
			color Layer3_result = Layer3_melanin_res;
		else
			Layer3_result = Layer3_col_res;
		
		float alpha_L3 = probabilityFunc(probability_L3, randInput);
		
		Layer3_mix_result = mix(Layer2_mix_result, Layer3_result, alpha_L3);
		
		result = Layer3_mix_result;
	}
	else
		Layer3_mix_result = Layer2_mix_result;
	
	
//-----------------LAYER4---------------------------------------------------------------------------
	if (Layer4)
	{
		color outMelanin_root_res_L4 = melaninFunc(melaninRoot_L4)*probabilityFunc(probability_L4, randInput)*positionFunc(pos_L4, soft_L4, posDir_L4, Barycentric==1?BarycentricU:P[0], Barycentric==1?BarycentricV:P[1], Barycentric);
		color outMelanin_tip_res_L4 = melaninFunc(melaninTip_L4)*probabilityFunc(probability_L4, randInput)*(1.0-positionFunc(pos_L4, soft_L4, posDir_L4, Barycentric==1?BarycentricU:P[0], Barycentric==1?BarycentricV:P[1], Barycentric));
		color Layer4_melanin_res = clamp((outMelanin_root_res_L4+outMelanin_tip_res_L4), 0.0, 1.0);

		color outCol_root_res_L4 = rootColor_L4*probabilityFunc(probability_L4, randInput)*positionFunc(pos_L4, soft_L4, posDir_L4, Barycentric==1?BarycentricU:P[0], Barycentric==1?BarycentricV:P[1], Barycentric);
		color outCol_tip_res_L4 = tipColor_L4*probabilityFunc(probability_L4, randInput)*(1.0-positionFunc(pos_L4, soft_L4, posDir_L4, Barycentric==1?BarycentricU:P[0], Barycentric==1?BarycentricV:P[1], Barycentric));
		color Layer4_col_res = clamp((outCol_root_res_L4+outCol_tip_res_L4), 0.0, 1.0);
		
		if (outputMelanin_L4)
			color Layer4_result = Layer4_melanin_res;
		else
			Layer4_result = Layer4_col_res;
		
		float alpha_L4 = probabilityFunc(probability_L4, randInput);
		
		Layer4_mix_result = mix(Layer3_mix_result, Layer4_result, alpha_L4);
		
		result = Layer4_mix_result;
	}
	else
		Layer4_mix_result = Layer3_mix_result;
	
	
//-----------------LAYER5---------------------------------------------------------------------------
	if (Layer5)
	{
		color outMelanin_root_res_L5 = melaninFunc(melaninRoot_L5)*probabilityFunc(probability_L5, randInput)*positionFunc(pos_L5, soft_L5, posDir_L5, Barycentric==1?BarycentricU:P[0], Barycentric==1?BarycentricV:P[1], Barycentric);
		color outMelanin_tip_res_L5 = melaninFunc(melaninTip_L5)*probabilityFunc(probability_L5, randInput)*(1.0-positionFunc(pos_L5, soft_L5, posDir_L5, Barycentric==1?BarycentricU:P[0], Barycentric==1?BarycentricV:P[1], Barycentric));
		color Layer5_melanin_res = clamp((outMelanin_root_res_L5+outMelanin_tip_res_L5), 0.0, 1.0);

		color outCol_root_res_L5 = rootColor_L5*probabilityFunc(probability_L5, randInput)*positionFunc(pos_L5, soft_L5, posDir_L5, Barycentric==1?BarycentricU:P[0], Barycentric==1?BarycentricV:P[1], Barycentric);
		color outCol_tip_res_L5 = tipColor_L5*probabilityFunc(probability_L5, randInput)*(1.0-positionFunc(pos_L5, soft_L5, posDir_L5, Barycentric==1?BarycentricU:P[0], Barycentric==1?BarycentricV:P[1], Barycentric));
		color Layer5_col_res = clamp((outCol_root_res_L5+outCol_tip_res_L5), 0.0, 1.0);
		
		if (outputMelanin_L5)
			color Layer5_result = Layer5_melanin_res;
		else
			Layer5_result = Layer5_col_res;
		
		float alpha_L5 = probabilityFunc(probability_L5, randInput);
		
		Layer5_mix_result = mix(Layer4_mix_result, Layer5_result, alpha_L5);
		
		result = Layer5_mix_result;
	}
	else
		Layer5_mix_result = Layer4_mix_result;
	

//-----------------LAYER6---------------------------------------------------------------------------
	if (Layer6)
	{
		color outMelanin_root_res_L6 = melaninFunc(melaninRoot_L6)*probabilityFunc(probability_L6, randInput)*positionFunc(pos_L6, soft_L6, posDir_L6, Barycentric==1?BarycentricU:P[0], Barycentric==1?BarycentricV:P[1], Barycentric);
		color outMelanin_tip_res_L6 = melaninFunc(melaninTip_L6)*probabilityFunc(probability_L6, randInput)*(1.0-positionFunc(pos_L6, soft_L6, posDir_L6, Barycentric==1?BarycentricU:P[0], Barycentric==1?BarycentricV:P[1], Barycentric));
		color Layer6_melanin_res = clamp((outMelanin_root_res_L6+outMelanin_tip_res_L6), 0.0, 1.0);

		color outCol_root_res_L6 = rootColor_L6*probabilityFunc(probability_L6, randInput)*positionFunc(pos_L6, soft_L6, posDir_L6, Barycentric==1?BarycentricU:P[0], Barycentric==1?BarycentricV:P[1], Barycentric);
		color outCol_tip_res_L6 = tipColor_L6*probabilityFunc(probability_L6, randInput)*(1.0-positionFunc(pos_L6, soft_L6, posDir_L6, Barycentric==1?BarycentricU:P[0], Barycentric==1?BarycentricV:P[1], Barycentric));
		color Layer6_col_res = clamp((outCol_root_res_L6+outCol_tip_res_L6), 0.0, 1.0);
		
		if (outputMelanin_L6)
			color Layer6_result = Layer6_melanin_res;
		else
			Layer6_result = Layer6_col_res;
		
		float alpha_L6 = probabilityFunc(probability_L6, randInput);
		
		Layer6_mix_result = mix(Layer5_mix_result, Layer6_result, alpha_L6);
		
		result = Layer6_mix_result;
	}
	else
		Layer6_mix_result = Layer5_mix_result;
	
	
//-----------------LAYER7---------------------------------------------------------------------------
	if (Layer7)
	{
		color outMelanin_root_res_L7 = melaninFunc(melaninRoot_L7)*probabilityFunc(probability_L7, randInput)*positionFunc(pos_L7, soft_L7, posDir_L7, Barycentric==1?BarycentricU:P[0], Barycentric==1?BarycentricV:P[1], Barycentric);
		color outMelanin_tip_res_L7 = melaninFunc(melaninTip_L7)*probabilityFunc(probability_L7, randInput)*(1.0-positionFunc(pos_L7, soft_L7, posDir_L7, Barycentric==1?BarycentricU:P[0], Barycentric==1?BarycentricV:P[1], Barycentric));
		color Layer7_melanin_res = clamp((outMelanin_root_res_L7+outMelanin_tip_res_L7), 0.0, 1.0);

		color outCol_root_res_L7 = rootColor_L7*probabilityFunc(probability_L7, randInput)*positionFunc(pos_L7, soft_L7, posDir_L7, Barycentric==1?BarycentricU:P[0], Barycentric==1?BarycentricV:P[1], Barycentric);
		color outCol_tip_res_L7 = tipColor_L7*probabilityFunc(probability_L7, randInput)*(1.0-positionFunc(pos_L7, soft_L7, posDir_L7, Barycentric==1?BarycentricU:P[0], Barycentric==1?BarycentricV:P[1], Barycentric));
		color Layer7_col_res = clamp((outCol_root_res_L7+outCol_tip_res_L7), 0.0, 1.0);
		
		if (outputMelanin_L7)
			color Layer7_result = Layer7_melanin_res;
		else
			Layer7_result = Layer7_col_res;
		
		float alpha_L7 = probabilityFunc(probability_L7, randInput);
		
		Layer7_mix_result = mix(Layer6_mix_result, Layer7_result, alpha_L7);
		
		result = Layer7_mix_result;
	}
	else
		Layer7_mix_result = Layer6_mix_result;
	
	
//-----------------LAYER8---------------------------------------------------------------------------
	if (Layer8)
	{
		color outMelanin_root_res_L8 = melaninFunc(melaninRoot_L8)*probabilityFunc(probability_L8, randInput)*positionFunc(pos_L8, soft_L8, posDir_L8, Barycentric==1?BarycentricU:P[0], Barycentric==1?BarycentricV:P[1], Barycentric);
		color outMelanin_tip_res_L8 = melaninFunc(melaninTip_L8)*probabilityFunc(probability_L8, randInput)*(1.0-positionFunc(pos_L8, soft_L8, posDir_L8, Barycentric==1?BarycentricU:P[0], Barycentric==1?BarycentricV:P[1], Barycentric));
		color Layer8_melanin_res = clamp((outMelanin_root_res_L8+outMelanin_tip_res_L8), 0.0, 1.0);

		color outCol_root_res_L8 = rootColor_L8*probabilityFunc(probability_L8, randInput)*positionFunc(pos_L8, soft_L8, posDir_L8, Barycentric==1?BarycentricU:P[0], Barycentric==1?BarycentricV:P[1], Barycentric);
		color outCol_tip_res_L8 = tipColor_L8*probabilityFunc(probability_L8, randInput)*(1.0-positionFunc(pos_L8, soft_L8, posDir_L8, Barycentric==1?BarycentricU:P[0], Barycentric==1?BarycentricV:P[1], Barycentric));
		color Layer8_col_res = clamp((outCol_root_res_L8+outCol_tip_res_L8), 0.0, 1.0);
		
		if (outputMelanin_L8)
			color Layer8_result = Layer8_melanin_res;
		else
			Layer8_result = Layer8_col_res;
		
		float alpha_L8 = probabilityFunc(probability_L8, randInput);
		
		Layer8_mix_result = mix(Layer7_mix_result, Layer8_result, alpha_L8);
		
		result = Layer8_mix_result;
	}
	else
		Layer8_mix_result = Layer7_mix_result;
	
	
	
//-----------------LAYER9---------------------------------------------------------------------------
	if (Layer9)
	{
		color outMelanin_root_res_L9 = melaninFunc(melaninRoot_L9)*probabilityFunc(probability_L9, randInput)*positionFunc(pos_L9, soft_L9, posDir_L9, Barycentric==1?BarycentricU:P[0], Barycentric==1?BarycentricV:P[1], Barycentric);
		color outMelanin_tip_res_L9 = melaninFunc(melaninTip_L9)*probabilityFunc(probability_L9, randInput)*(1.0-positionFunc(pos_L9, soft_L9, posDir_L9, Barycentric==1?BarycentricU:P[0], Barycentric==1?BarycentricV:P[1], Barycentric));
		color Layer9_melanin_res = clamp((outMelanin_root_res_L9+outMelanin_tip_res_L9), 0.0, 1.0);

		color outCol_root_res_L9 = rootColor_L9*probabilityFunc(probability_L9, randInput)*positionFunc(pos_L9, soft_L9, posDir_L9, Barycentric==1?BarycentricU:P[0], Barycentric==1?BarycentricV:P[1], Barycentric);
		color outCol_tip_res_L9 = tipColor_L9*probabilityFunc(probability_L9, randInput)*(1.0-positionFunc(pos_L9, soft_L9, posDir_L9, Barycentric==1?BarycentricU:P[0], Barycentric==1?BarycentricV:P[1], Barycentric));
		color Layer9_col_res = clamp((outCol_root_res_L9+outCol_tip_res_L9), 0.0, 1.0);
		
		if (outputMelanin_L9)
			color Layer9_result = Layer9_melanin_res;
		else
			Layer9_result = Layer9_col_res;
		
		float alpha_L9 = probabilityFunc(probability_L9, randInput);
		
		Layer9_mix_result = mix(Layer8_mix_result, Layer9_result, alpha_L9);
		
		result = Layer9_mix_result;
	}
	else
		Layer9_mix_result = Layer8_mix_result;
	
	
	
//-----------------LAYER10---------------------------------------------------------------------------
	if (Layer10)
	{
		color outMelanin_root_res_L10 = melaninFunc(melaninRoot_L10)*probabilityFunc(probability_L10, randInput)*positionFunc(pos_L10, soft_L10, posDir_L10, Barycentric==1?BarycentricU:P[0], Barycentric==1?BarycentricV:P[1], Barycentric);
		color outMelanin_tip_res_L10 = melaninFunc(melaninTip_L10)*probabilityFunc(probability_L10, randInput)*(1.0-positionFunc(pos_L10, soft_L10, posDir_L10, Barycentric==1?BarycentricU:P[0], Barycentric==1?BarycentricV:P[1], Barycentric));
		color Layer10_melanin_res = clamp((outMelanin_root_res_L10+outMelanin_tip_res_L10), 0.0, 1.0);

		color outCol_root_res_L10 = rootColor_L10*probabilityFunc(probability_L10, randInput)*positionFunc(pos_L10, soft_L10, posDir_L10, Barycentric==1?BarycentricU:P[0], Barycentric==1?BarycentricV:P[1], Barycentric);
		color outCol_tip_res_L10 = tipColor_L10*probabilityFunc(probability_L10, randInput)*(1.0-positionFunc(pos_L10, soft_L10, posDir_L10, Barycentric==1?BarycentricU:P[0], Barycentric==1?BarycentricV:P[1], Barycentric));
		color Layer10_col_res = clamp((outCol_root_res_L10+outCol_tip_res_L10), 0.0, 1.0);
		
		if (outputMelanin_L10)
			color Layer10_result = Layer10_melanin_res;
		else
			Layer10_result = Layer10_col_res;
		
		float alpha_L10 = probabilityFunc(probability_L10, randInput);
		
		Layer10_mix_result = mix(Layer9_mix_result, Layer10_result, alpha_L10);
		
		result = Layer10_mix_result;
	}
	else
		Layer10_mix_result = Layer9_mix_result;
}